type: edu
files:
  - name: src/battleship/Main.kt
    visible: true
    text: |-
      package battleship
      
      fun main() {
          println("Hello World!")
      }
    learner_created: false
  - name: test/Tests.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      
      public class Tests extends StageTest<String> {
          @DynamicTestingMethod
          CheckResult exampleTest() {
      
              TestedProgram main = new TestedProgram();
              String output = main.start().trim();
              String[][] matrix;
      
              if (!output.toLowerCase().contains("aircraft carrier")) {
                  return CheckResult.wrong("After starting the program, you should request " +
                      "the coordinates of the Aircraft Carrier in that way:\n" +
                      "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
              }
      
              output = main.execute("F3 F7").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "F3 F7");
      
              if (!output.toLowerCase().contains("battleship")) {
                  return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                      "the coordinates of the Battleship in that way:\n" +
                      "\"Enter the coordinates of the Battleship (4 cells):\"");
              }
      
              output = main.execute("A1 D1").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "A1 D1");
      
              if (!output.toLowerCase().contains("submarine")) {
                  return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                      "the coordinates of the Submarine in that way:\n" +
                      "\"Enter the coordinates of the Submarine (3 cells):\"");
              }
      
              output = main.execute("J7 J10").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
              }
      
              output = main.execute("J10 J8").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "J10 J8");
      
              if (!output.toLowerCase().contains("cruiser")) {
                  return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                      "the coordinates of the Cruiser in that way:\n" +
                      "\"Enter the coordinates of the Cruiser (3 cells):\"");
              }
      
              output = main.execute("B9 D8").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
              }
      
              output = main.execute("B9 D9").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "B9 D9");
      
              if (!output.toLowerCase().contains("destroyer")) {
                  return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                      "the coordinates of the Destroyer in that way:\n" +
                      "\"Enter the coordinates of the Destroyer (2 cells):\"");
              }
      
              output = main.execute("E6 D6").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                      "(Too close to another ship)");
              }
      
              output = main.execute("I2 J2").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "I2 J2");
      
              if (!output.contains("starts")) {
                  return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                      "\"The game starts!\"");
              }
      
              String[] temp = output.split("starts");
              if (temp.length < 2) {
                  return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
              }
              output = temp[1];
      
              if (!matrixIsEmpty(getFieldMatrix(output))) {
                  return CheckResult.wrong("After the game starts you should print an empty battle field!");
              }
      
              output = main.execute("A1");
              if (!output.contains("hit") || !output.contains("ship")) {
                  return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
              }
      
              matrix = getFieldMatrix(output);
              checkShot(matrix, "A1", output);
      
              String[] splittedOutput = output.split("ship");
              if (splittedOutput.length < 2) {
                  return CheckResult.wrong("Two game fields were expected in the output.");
              }
      
              matrix = getFieldMatrix(splittedOutput[1]);
              findAllShips(matrix, new String[]{"A1 D1", "B9 D9", "F3 F7", "I2 J2", "J8 J10"});
      
              return CheckResult.correct();
          }
      
      
          @DynamicTestingMethod
          CheckResult test1() {
      
              TestedProgram main = new TestedProgram();
              String output = main.start().trim();
              String[][] matrix;
      
              if (!output.toLowerCase().contains("aircraft carrier")) {
                  return CheckResult.wrong("After starting the program, you should request " +
                      "the coordinates of the Aircraft Carrier in that way:\n" +
                      "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
              }
      
              output = main.execute("J3 J7").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "J3 J7");
      
              if (!output.toLowerCase().contains("battleship")) {
                  return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                      "the coordinates of the Battleship in that way:\n" +
                      "\"Enter the coordinates of the Battleship (4 cells):\"");
              }
      
              output = main.execute("C8 B8");
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                      "(Incorrect length of the ship)");
              }
      
              output = main.execute("C8 F8").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "C8 F8");
      
              if (!output.toLowerCase().contains("submarine")) {
                  return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                      "the coordinates of the Submarine in that way:\n" +
                      "\"Enter the coordinates of the Submarine (3 cells):\"");
              }
      
              output = main.execute("A1 C2").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
              }
      
              output = main.execute("A1 C1").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "A1 C1");
      
              if (!output.toLowerCase().contains("cruiser")) {
                  return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                      "the coordinates of the Cruiser in that way:\n" +
                      "\"Enter the coordinates of the Cruiser (3 cells):\"");
              }
      
              output = main.execute("H1 H3").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "H1 H3");
      
              if (!output.toLowerCase().contains("destroyer")) {
                  return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                      "the coordinates of the Destroyer in that way:\n" +
                      "\"Enter the coordinates of the Destroyer (2 cells):\"");
              }
      
              output = main.execute("G2 E2").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                      "(Too close to another ship)");
              }
      
              output = main.execute("B5 C5").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "B5 C5");
      
              if (!output.contains("starts")) {
                  return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                      "\"The game starts!\"");
              }
      
              String[] temp = output.split("starts");
              if (temp.length < 2) {
                  return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
              }
              output = temp[1];
      
              if (!matrixIsEmpty(getFieldMatrix(output))) {
                  return CheckResult.wrong("After the game starts you should print an empty battle field!");
              }
      
              output = main.execute("M1");
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
              }
      
              output = main.execute("A11");
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
              }
      
              output = main.execute("E4");
              if (!output.toLowerCase().contains("missed")) {
                  return CheckResult.wrong("After missing a ship you should print \"You missed!\".");
              }
      
              String[] splittedOutput = output.split("missed");
              if (splittedOutput.length < 2) {
                  return CheckResult.wrong("Two game field were expected in the output.");
              }
      
              matrix = getFieldMatrix(splittedOutput[1]);
              checkMissing(matrix, "E4", output);
              findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "B5 C5"});
      
              return CheckResult.correct();
          }
      
      
          @DynamicTestingMethod
          CheckResult test2() {
      
              TestedProgram main = new TestedProgram();
              String output = main.start().trim();
              String[][] matrix;
      
              if (!output.toLowerCase().contains("aircraft carrier")) {
                  return CheckResult.wrong("After starting the program, you should request " +
                      "the coordinates of the Aircraft Carrier in that way:\n" +
                      "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
              }
      
              output = main.execute("J3 J7").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "J3 J7");
      
              if (!output.toLowerCase().contains("battleship")) {
                  return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                      "the coordinates of the Battleship in that way:\n" +
                      "\"Enter the coordinates of the Battleship (4 cells):\"");
              }
      
              output = main.execute("C8 B8");
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                      "(Incorrect length of the ship)");
              }
      
              output = main.execute("C8 F8").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "C8 F8");
      
              if (!output.toLowerCase().contains("submarine")) {
                  return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                      "the coordinates of the Submarine in that way:\n" +
                      "\"Enter the coordinates of the Submarine (3 cells):\"");
              }
      
              output = main.execute("A1 C2").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
              }
      
              output = main.execute("A1 C1").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "A1 C1");
      
              if (!output.toLowerCase().contains("cruiser")) {
                  return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                      "the coordinates of the Cruiser in that way:\n" +
                      "\"Enter the coordinates of the Cruiser (3 cells):\"");
              }
      
              output = main.execute("H1 H3").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "H1 H3");
      
              if (!output.toLowerCase().contains("destroyer")) {
                  return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                      "the coordinates of the Destroyer in that way:\n" +
                      "\"Enter the coordinates of the Destroyer (2 cells):\"");
              }
      
              output = main.execute("G2 E2").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                      "(Too close to another ship)");
              }
      
              output = main.execute("E5 F5").trim();
              findShipByCoordinates(getFieldMatrix(output), "E5 F5");
      
              if (!output.contains("starts")) {
                  return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                      "\"The game starts!\"");
              }
      
              output = main.execute("E8");
              checkShot(getFieldMatrix(output), "E8", output);
      
              if (!output.contains("hit") || !output.contains("ship")) {
                  return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
              }
      
              String[] splittedOutput = output.split("ship");
              if (splittedOutput.length != 2) {
                  return CheckResult.wrong("Two game field were expected in the output. No one was found");
              }
      
              matrix = getFieldMatrix(splittedOutput[1]);
              findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "E5 F5"});
      
              return CheckResult.correct();
          }
      
      
          void findShipByCoordinates(String[][] matrix, String coordinates) {
              int[] coordinatesInt = parseCoordinates(coordinates);
      
              if (coordinatesInt[0] > coordinatesInt[2]) {
                  int swap = coordinatesInt[0];
                  coordinatesInt[0] = coordinatesInt[2];
                  coordinatesInt[2] = swap;
              } else if (coordinatesInt[1] > coordinatesInt[3]) {
                  int swap = coordinatesInt[1];
                  coordinatesInt[1] = coordinatesInt[3];
                  coordinatesInt[3] = swap;
              }
      
              if (coordinatesInt[0] == coordinatesInt[2]) {
                  int cord = coordinatesInt[0];
                  for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                      if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                          throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                      }
                  }
              } else {
                  int cord = coordinatesInt[1];
                  for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                      if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                          throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                      }
                  }
              }
          }
      
          boolean matrixIsEmpty(String[][] matrix) {
              for (String[] strings : matrix) {
                  for (int j = 0; j < matrix.length; j++) {
                      if (!strings[j].trim().equals("~")) {
                          return false;
                      }
                  }
              }
              return true;
          }
      
          void checkShot(String[][] matrix, String coordinate, String output) {
              int[] parsedCoordinate = new int[2];
              parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
              parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;
      
              if (!output.toLowerCase().contains("hit")) {
                  throw new WrongAnswer(
                      "Your program reacted unpredictably to a hit.\n" +
                          "You should print \"You hit a ship!\".");
              }
      
              if (output.toLowerCase().contains("missed")) {
                  throw new WrongAnswer("Seems like your program prints " +
                      "both \"hit\" and \"missed\".\n" +
                      "You should print only \"You hit a ship!\".");
              }
      
              if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                  throw new WrongAnswer("You should print \"X\" in " +
                      " coordinates where you hit the ship.");
              }
          }
      
          void checkMissing(String[][] matrix, String coordinate, String output) {
              int[] parsedCoordinate = new int[2];
              parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
              parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;
      
              if (!output.toLowerCase().contains("missed")) {
                  throw new WrongAnswer(
                      "Your program reacted unpredictably to a miss.\n" +
                          "You should print \"You missed!\".");
              }
      
              if (output.toLowerCase().contains("hit")) {
                  throw new WrongAnswer("Seems like your program prints " +
                      "both \"hit\" and \"missed\".\n" +
                      "You should print only \"You missed!\".");
              }
      
              if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                  throw new WrongAnswer("You should print \"M\" in " +
                      " coordinates where you missed.");
              }
          }
      
          int[] parseCoordinates(String coordinatesString) {
              String[] splittedCoords = coordinatesString.split(" ");
              int[] parsedCoordinates = new int[4];
      
              parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
              parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
              parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
              parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;
      
              return parsedCoordinates;
          }
      
          int charToInt(String charCoordinate) {
              charCoordinate = charCoordinate.toLowerCase();
              char character = charCoordinate.charAt(0);
              return (int) character - (int) 'a';
          }
      
          String[][] getFieldMatrix(String output) {
      
              WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                  "Make sure you print it like in examples!");
      
              String[] splittedOutput = output.split("\n");
              String[][] matrix = new String[10][10];
      
              try {
                  int index = 0;
                  while (!(splittedOutput[index].contains("1") &&
                      splittedOutput[index].contains("2") &&
                      splittedOutput[index].contains("10"))) {
                      index++;
                      if (index > 1000) {
                          throw cantParseException;
                      }
                  }
                  index++;
      
                  for (int i = 0; i < 10; i++) {
                      String temp = splittedOutput[index].substring(2).trim();
                      String[] splittedLine = temp.trim().split(" ");
                      if (splittedLine.length != 10) {
                          throw cantParseException;
                      }
                      matrix[i] = splittedLine;
                      index++;
                  }
              } catch (IndexOutOfBoundsException ignored) {
                  throw cantParseException;
              }
      
              return matrix;
          }
      
          boolean isGameFieldPrinted(String output) {
              return output.contains("1") && output.contains("2") && output.contains("10");
          }
      
          void findAllShips(String[][] matrix, String[] coordinates) {
              for (String item : coordinates) {
                  findShipByCoordinates(matrix, item);
              }
          }
      }
    learner_created: false
  - name: src/battleship/Utils.kt
    visible: true
    text: |-
      package battleship
      
      import kotlin.math.abs
      
      typealias Crd = Pair<Int, Int>
      
      class Utils {
          companion object {
              val NAME_TO_SIZE_MAP = mapOf(
                  "Aircraft Carrier" to 5,
                  "Battleship" to 4,
                  "Submarine" to 3,
                  "Cruiser" to 3,
                  "Destroyer" to 2,
              )
      
              private val CRD_REGEX = "[A-J]([0-9]|10)".toRegex()
      
              fun isShipShapeWrong(crd1: Crd, crd2: Crd) = crd1.first != crd2.first && crd1.second != crd2.second
      
              fun isShipSizeWrong(name: String, crd1: Crd, crd2: Crd) =
                  (crd1.first == crd2.first && abs(crd1.second - crd2.second) + 1 != NAME_TO_SIZE_MAP[name]) ||
                          (crd1.second == crd2.second && abs(crd1.first - crd2.first) + 1 != NAME_TO_SIZE_MAP[name])
      
              fun isCrdValid(raw: String) = CRD_REGEX.matches(raw)
      
              fun parseDoubleCrd(raw: String): Pair<Crd, Crd> =
                  raw.split(" ").let { parts ->
                      return Pair(parseCrd(parts[0]), parseCrd(parts[1]))
                  }
      
              fun parseCrd(part: String): Crd = Pair(part[0] - 'A', part.substring(1).toInt() - 1)
          }
      }
    learner_created: true
  - name: src/battleship/Board.kt
    visible: true
    text: |-
      package battleship
      
      class Board {
      
          enum class Cell(private val mark: Char) {
              Fog('~'),
              Ship('O'),
              Hit('X'),
              Miss('M');
      
              override fun toString() = mark.toString()
          }
      
          companion object {
              private const val CAPTION = "  1 2 3 4 5 6 7 8 9 10\n"
              private val SEA_ROW = "%s ".repeat(11).trim()
              private val LETTERS = 'A'..'J'
      
              private val SHIFT_CELLS = listOf(Pair(-1, -1), Pair(-1, 0), Pair(-1, 1),
                                               Pair( 0, -1), Pair( 0, 0), Pair( 0, 1),
                                               Pair( 1, -1), Pair( 1, 0), Pair( 1, 1)
              )
      
              private fun emptySea() = MutableList(10) { MutableList(10) { Cell.Fog } }
          }
      
          private val shipCells: MutableMap<Crd, Ship> = mutableMapOf()
          private val hitCells: MutableSet<Crd> = mutableSetOf()
          private val missCells: MutableSet<Crd> = mutableSetOf()
      
          fun shipFits(ship: Ship): Boolean {
              for (crd in ship.crdView) if (isShipNearOrInCell(crd)) return false
              return true
          }
      
          private fun isShipNearOrInCell(crd: Crd) =
              SHIFT_CELLS.map { shift -> Pair(shift.first + crd.first, shift.second + crd.second) }
                  .intersect(shipCells.keys)
                  .isNotEmpty()
      
          fun addShip(ship: Ship) {
              shipCells.putAll(ship.crdView.map { crd -> crd to ship })
          }
      
          private fun getWholeSea(): MutableList<MutableList<Cell>> =
              emptySea().also { sea ->
                  shipCells.keys.forEach { sea[it.first][it.second] = Cell.Ship }
                  hitCells.forEach { sea[it.first][it.second] = Cell.Hit }
                  missCells.forEach { sea[it.first][it.second] = Cell.Miss }
              }
      
          fun move(crd: Crd): Cell =
              when {
                  crd in shipCells -> {
                      val ship = shipCells.remove(crd)!!
                      hitCells.add(crd)
                      ship.hit(crd)
                      Cell.Ship
                  }
                  else -> {
                      missCells.add(crd)
                      Cell.Miss
                  }
              }
      
          override fun toString(): String {
              val sea = getWholeSea()
              return CAPTION +
              LETTERS.mapIndexed { i, letter ->
                  SEA_ROW.format(letter, *sea[i].toTypedArray())
              }.joinToString("\n") + '\n'
          }
      }
    learner_created: true
  - name: src/battleship/Ship.kt
    visible: true
    text: |-
      package battleship
      
      class Ship(val name: String, crd1: Crd, crd2: Crd) {
      
          private val coordinates = mutableSetOf<Crd>()
          val crdView get() = coordinates.toSet()
      
          private val hits = mutableSetOf<Crd>()
          val hitsView get() = hits.toSet()
      
          val dead get() = coordinates == hits
      
          init {
              for (x in minOf(crd1.first, crd2.first)..maxOf(crd1.first, crd2.first)) {
                  for (y in minOf(crd1.second, crd2.second)..maxOf(crd1.second, crd2.second))
                      coordinates.add(Pair(x, y))
              }
          }
      
          fun hit(crd: Crd) {
              if (crd !in coordinates) throw IllegalArgumentException("Wrong coordinate for this ship!")
              hits.add(crd)
          }
      }
    learner_created: true
  - name: src/battleship/Menu.kt
    visible: true
    text: |-
      package battleship
      
      class Menu {
          private val board = Board()
      
          fun run() {
              placeShips()
              takeShot()
          }
      
          private fun placeShips() {
              println(board)
      
              Utils.NAME_TO_SIZE_MAP.forEach { (name, size) ->
                  println("Enter the coordinates of the $name ($size cells):\n")
      
                  while (true) {
                      val raw = readln()
                      println()
                      val (crd1, crd2) = Utils.parseDoubleCrd(raw)
                      when {
                          Utils.isShipShapeWrong(crd1, crd2) ->
                              println("Error! Wrong ship location! Try again:\n")
      
                          Utils.isShipSizeWrong(name, crd1, crd2) ->
                              println("Error! Wrong length of the $name! Try again:\n")
      
                          else -> {
                              val ship = Ship(name, crd1, crd2)
                              if (!board.shipFits(ship))
                                  println("Error! You placed it too close to another one. Try again:\n")
                              else {
                                  board.addShip(ship)
                                  break
                              }
                          }
                      }
                  }
                  println(board)
              }
          }
      
          private fun takeShot() {
              println("The game starts!\n")
              println(board)
              println("Take a shot!\n")
              while (true) {
                  val raw = readln()
                  println()
                  if (!Utils.isCrdValid(raw)) {
                      println("Error! You entered the wrong coordinates! Try again:\n")
                      continue
                  }
                  val crd = Utils.parseCrd(raw)
                  val move = board.move(crd)
                  println(board)
                  when (move) {
                      Board.Cell.Ship -> println("You hit a ship!")
                      else -> println("You missed!")
                  }
                  break
              }
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/30257#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 04 Nov 2023 00:14:42 UTC"
record: 3
